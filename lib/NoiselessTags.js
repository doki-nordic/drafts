
const CodeBlocks = require('./CodeBlocks');

function extract(functionBody, firstBlock) {

	const MANUAL = 'm';
	const AUTOGENERATED = 'a';
	const BEGIN = '%';
	const CONTINUE = undefined;
	const END = '@';

	let lines = functionBody.split(/(?<=\n)/);
	let currentBlock = firstBlock;
	let state = MANUAL;
	let data = '';
	let result = {};
	let autoCode = '';

	result[currentBlock] = result[currentBlock] || '';

	for (line of lines) {
		let [ending, type, codePart] = line.match(/\/\*##+(%|@)?([A-Za-z0-9\+\/]*)\*\/\s*$/) || ['', MANUAL, null];
		let plainLine = line.substring(0, line.length - ending.length);
		switch (type) {
			case MANUAL:
				if (state != MANUAL) {
					throw Error('Deleted or corrupted end of autogenerated code.');
				}
				result[currentBlock] += line;
				break;
			case BEGIN:
				if (state != MANUAL) {
					throw Error('Deleted or corrupted end of autogenerated code.');
				}
				autoCode = plainLine;
				data = codePart;
				state = AUTOGENERATED;
				break;
			case CONTINUE:
				if (state == MANUAL) {
					autoCode = '';
					data = '';
					state = AUTOGENERATED;
				} else {
					autoCode += plainLine;
					data += codePart;
					break;
				} // break - conditionally inside 'if' body
			case END:
				if (state == MANUAL) {
					throw Error('Deleted or corrupted beginning of autogenerated code.');
				}
				autoCode += plainLine;
				data += codePart;
				currentBlock = CodeBlocks.validate(autoCode, data);
				result[currentBlock] = result[currentBlock] || '';
				state = MANUAL;
				break;
		}
	}

	if (state != MANUAL) {
		throw Error('Deleted or corrupted end of autogenerated code.');
	}

	for (let k of Object.keys(result)) {
		result[k] = result[k]
			.replace(/^([\t \r]*\n)+/, '')
			.replace(/(?<=\n)[\t \r]*(\n[\t \r]*)+$/, '');
		if (result[k] == '') {
			delete result[k];
		}
	}

	return result;
}


exports.extract = extract;
